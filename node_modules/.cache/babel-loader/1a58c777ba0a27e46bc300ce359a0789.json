{"ast":null,"code":"import { renderFormData } from \"../../Utils/Helper\";\nimport { ADMIN_LOGIN_REQUEST, ADMIN_LOGIN_SUCCESS, ADMIN_LOGIN_FAIL, ADMIN_CHANGE_PASSWORD_RESET, ADMIN_CHANGE_PASSWORD_REQUEST, ADMIN_CHANGE_PASSWORD_SUCCESS, ADMIN_CHANGE_PASSWORD_FAIL, ADMIN_FORGOT_PASSWORD_REQUEST, ADMIN_FORGOT_PASSWORD_SUCCESS, ADMIN_FORGOT_PASSWORD_FAIL, ADMIN_RESET_PASSWORD_REQUEST, ADMIN_RESET_PASSWORD_SUCCESS, ADMIN_RESET_PASSWORD_FAIL, ADMIN_UPDATE_PROFILE_RESET, ADMIN_UPDATE_PROFILE_REQUEST, ADMIN_UPDATE_PROFILE_SUCCESS, ADMIN_UPDATE_PROFILE_FAIL, ADMIN_GET_PROFILE_REQUEST, ADMIN_GET_PROFILE_SUCCESS, ADMIN_GET_PROFILE_FAIL } from \"../../Constants/AuthConstants\";\nimport { POSTAPI, PUTAUTHAPI, GETAUTHAPI } from '../../Api/Index';\nexport const AdminLoginAction = payload => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_LOGIN_REQUEST\n    });\n    let data = await POSTAPI('signin', payload);\n\n    if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n      localStorage.setItem('isAdminLoginToken', data === null || data === void 0 ? void 0 : data.token);\n      sessionStorage.setItem('user', JSON.stringify(data));\n      dispatch({\n        type: ADMIN_LOGIN_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADMIN_LOGIN_FAIL,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ADMIN_LOGIN_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const AdminChangePasswordAction = payload => async dispatch => {\n  if (payload === 'RESET') {\n    dispatch({\n      type: ADMIN_CHANGE_PASSWORD_RESET\n    });\n  } else {\n    try {\n      dispatch({\n        type: ADMIN_CHANGE_PASSWORD_REQUEST\n      });\n      let data = await PUTAUTHAPI('change-password', payload);\n\n      if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n        dispatch({\n          type: ADMIN_CHANGE_PASSWORD_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: ADMIN_CHANGE_PASSWORD_FAIL,\n          payload: data\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: ADMIN_CHANGE_PASSWORD_FAIL,\n        payload: error.message\n      });\n    }\n  }\n};\nexport const AdminForgotPasswordAction = payload => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_FORGOT_PASSWORD_REQUEST\n    });\n    let data = await POSTAPI('forgot-password', payload);\n\n    if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n      dispatch({\n        type: ADMIN_FORGOT_PASSWORD_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADMIN_FORGOT_PASSWORD_FAIL,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ADMIN_FORGOT_PASSWORD_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const AdminResetPasswordAction = payload => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_RESET_PASSWORD_REQUEST\n    });\n    let data = await POSTAPI('reset-password', payload);\n\n    if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n      dispatch({\n        type: ADMIN_RESET_PASSWORD_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADMIN_RESET_PASSWORD_FAIL,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ADMIN_RESET_PASSWORD_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const AdminUpdateProfileAction = payload => async dispatch => {\n  if (payload === 'RESET') {\n    dispatch({\n      type: ADMIN_UPDATE_PROFILE_RESET\n    });\n  } else {\n    try {\n      dispatch({\n        type: ADMIN_UPDATE_PROFILE_REQUEST\n      });\n      let payloadData = await renderFormData(payload);\n      let data = await PUTAUTHAPI('update-profile', payloadData);\n\n      if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n        dispatch({\n          type: ADMIN_UPDATE_PROFILE_SUCCESS,\n          payload: data\n        });\n      } else {\n        dispatch({\n          type: ADMIN_UPDATE_PROFILE_FAIL,\n          payload: data\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: ADMIN_UPDATE_PROFILE_FAIL,\n        payload: error.message\n      });\n    }\n  }\n};\nexport const AdminGetProfileAction = payload => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_GET_PROFILE_REQUEST\n    });\n    let data = await GETAUTHAPI('profile', payload);\n\n    if (data && (data === null || data === void 0 ? void 0 : data.status) === true) {\n      dispatch({\n        type: ADMIN_GET_PROFILE_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: ADMIN_GET_PROFILE_FAIL,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ADMIN_GET_PROFILE_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["renderFormData","ADMIN_LOGIN_REQUEST","ADMIN_LOGIN_SUCCESS","ADMIN_LOGIN_FAIL","ADMIN_CHANGE_PASSWORD_RESET","ADMIN_CHANGE_PASSWORD_REQUEST","ADMIN_CHANGE_PASSWORD_SUCCESS","ADMIN_CHANGE_PASSWORD_FAIL","ADMIN_FORGOT_PASSWORD_REQUEST","ADMIN_FORGOT_PASSWORD_SUCCESS","ADMIN_FORGOT_PASSWORD_FAIL","ADMIN_RESET_PASSWORD_REQUEST","ADMIN_RESET_PASSWORD_SUCCESS","ADMIN_RESET_PASSWORD_FAIL","ADMIN_UPDATE_PROFILE_RESET","ADMIN_UPDATE_PROFILE_REQUEST","ADMIN_UPDATE_PROFILE_SUCCESS","ADMIN_UPDATE_PROFILE_FAIL","ADMIN_GET_PROFILE_REQUEST","ADMIN_GET_PROFILE_SUCCESS","ADMIN_GET_PROFILE_FAIL","POSTAPI","PUTAUTHAPI","GETAUTHAPI","AdminLoginAction","payload","dispatch","type","data","status","localStorage","setItem","token","sessionStorage","JSON","stringify","error","message","AdminChangePasswordAction","AdminForgotPasswordAction","AdminResetPasswordAction","AdminUpdateProfileAction","payloadData","AdminGetProfileAction"],"sources":["/home/nhz/admin (1)/src/Redux/Actions/AuthActions.tsx"],"sourcesContent":["import { Dispatch } from \"react\";\nimport { renderFormData } from \"../../Utils/Helper\";\nimport {\n    ADMIN_LOGIN_REQUEST,\n    ADMIN_LOGIN_SUCCESS,\n    ADMIN_LOGIN_FAIL,\n\n    ADMIN_CHANGE_PASSWORD_RESET,\n    ADMIN_CHANGE_PASSWORD_REQUEST,\n    ADMIN_CHANGE_PASSWORD_SUCCESS,\n    ADMIN_CHANGE_PASSWORD_FAIL,\n\n    ADMIN_FORGOT_PASSWORD_REQUEST,\n    ADMIN_FORGOT_PASSWORD_SUCCESS,\n    ADMIN_FORGOT_PASSWORD_FAIL,\n\n    ADMIN_RESET_PASSWORD_REQUEST,\n    ADMIN_RESET_PASSWORD_SUCCESS,\n    ADMIN_RESET_PASSWORD_FAIL,\n\n    ADMIN_UPDATE_PROFILE_RESET,\n    ADMIN_UPDATE_PROFILE_REQUEST,\n    ADMIN_UPDATE_PROFILE_SUCCESS,\n    ADMIN_UPDATE_PROFILE_FAIL,\n\n    ADMIN_GET_PROFILE_REQUEST,\n    ADMIN_GET_PROFILE_SUCCESS,\n    ADMIN_GET_PROFILE_FAIL\n} from \"../../Constants/AuthConstants\";\nimport { POSTAPI, PUTAUTHAPI, GETAUTHAPI } from '../../Api/Index';\n\nexport const AdminLoginAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: ADMIN_LOGIN_REQUEST\n        });\n        let data = await POSTAPI('signin', payload);\n        if (data && data?.status === true) {\n            localStorage.setItem('isAdminLoginToken', data?.token);\n            sessionStorage.setItem('user', JSON.stringify(data));\n            dispatch({\n                type: ADMIN_LOGIN_SUCCESS,\n                payload: data\n            });\n        }\n        else {\n            dispatch({\n                type: ADMIN_LOGIN_FAIL,\n                payload: data\n            });\n        }\n    }\n    catch (error: any) {\n        dispatch({\n            type: ADMIN_LOGIN_FAIL,\n            payload: error.message\n        });\n    }\n};\n\nexport const AdminChangePasswordAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    if (payload === 'RESET') {\n        dispatch({ type: ADMIN_CHANGE_PASSWORD_RESET });\n    }\n    else {\n        try {\n            dispatch({\n                type: ADMIN_CHANGE_PASSWORD_REQUEST\n            });\n            let data = await PUTAUTHAPI('change-password', payload);\n            if (data && data?.status === true) {\n                dispatch({\n                    type: ADMIN_CHANGE_PASSWORD_SUCCESS,\n                    payload: data\n                });\n            }\n            else {\n                dispatch({\n                    type: ADMIN_CHANGE_PASSWORD_FAIL,\n                    payload: data\n                });\n            }\n        }\n        catch (error: any) {\n            dispatch({\n                type: ADMIN_CHANGE_PASSWORD_FAIL,\n                payload: error.message\n            });\n        }\n    }\n};\n\nexport const AdminForgotPasswordAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: ADMIN_FORGOT_PASSWORD_REQUEST\n        });\n        let data = await POSTAPI('forgot-password', payload);\n        if (data && data?.status === true) {\n            dispatch({\n                type: ADMIN_FORGOT_PASSWORD_SUCCESS,\n                payload: data\n            });\n        }\n        else {\n            dispatch({\n                type: ADMIN_FORGOT_PASSWORD_FAIL,\n                payload: data\n            });\n        }\n    }\n    catch (error: any) {\n        dispatch({\n            type: ADMIN_FORGOT_PASSWORD_FAIL,\n            payload: error.message\n        });\n    }\n};\n\nexport const AdminResetPasswordAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: ADMIN_RESET_PASSWORD_REQUEST\n        });\n        let data = await POSTAPI('reset-password', payload);\n        if (data && data?.status === true) {\n            dispatch({\n                type: ADMIN_RESET_PASSWORD_SUCCESS,\n                payload: data\n            });\n        }\n        else {\n            dispatch({\n                type: ADMIN_RESET_PASSWORD_FAIL,\n                payload: data\n            });\n        }\n    }\n    catch (error: any) {\n        dispatch({\n            type: ADMIN_RESET_PASSWORD_FAIL,\n            payload: error.message\n        });\n    }\n};\n\nexport const AdminUpdateProfileAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    if (payload === 'RESET') {\n        dispatch({ type: ADMIN_UPDATE_PROFILE_RESET });\n    }\n    else {\n        try {\n            dispatch({\n                type: ADMIN_UPDATE_PROFILE_REQUEST\n            });\n            let payloadData = await renderFormData(payload);\n            let data = await PUTAUTHAPI('update-profile', payloadData);\n            if (data && data?.status === true) {\n                dispatch({\n                    type: ADMIN_UPDATE_PROFILE_SUCCESS,\n                    payload: data\n                });\n            }\n            else {\n                dispatch({\n                    type: ADMIN_UPDATE_PROFILE_FAIL,\n                    payload: data\n                });\n            }\n        }\n        catch (error: any) {\n            dispatch({\n                type: ADMIN_UPDATE_PROFILE_FAIL,\n                payload: error.message\n            });\n        }\n    }\n};\n\nexport const AdminGetProfileAction = (payload: any) => async (dispatch: Dispatch<any>) => {\n    try {\n        dispatch({\n            type: ADMIN_GET_PROFILE_REQUEST\n        });\n        let data = await GETAUTHAPI('profile', payload);\n        if (data && data?.status === true) {\n            dispatch({\n                type: ADMIN_GET_PROFILE_SUCCESS,\n                payload: data\n            });\n        }\n        else {\n            dispatch({\n                type: ADMIN_GET_PROFILE_FAIL,\n                payload: data\n            });\n        }\n    }\n    catch (error: any) {\n        dispatch({\n            type: ADMIN_GET_PROFILE_FAIL,\n            payload: error.message\n        });\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}