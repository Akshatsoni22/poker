{"ast":null,"code":"import AggregateError from 'aggregate-error'; // Use built-in when targeting Node.js 16\n\nexport class IpNotFoundError extends Error {\n  constructor(options) {\n    super('Could not get the public IP address', options);\n    this.name = 'IpNotFoundError';\n  }\n\n}\nexport function createPublicIp(publicIpv4, publicIpv6) {\n  return function publicIp(options) {\n    // eslint-disable-line func-names\n    const ipv4Promise = publicIpv4(options);\n    const ipv6Promise = publicIpv6(options);\n\n    const promise = (async () => {\n      try {\n        const ipv6 = await ipv6Promise;\n        ipv4Promise.cancel();\n        return ipv6;\n      } catch (ipv6Error) {\n        if (!(ipv6Error instanceof IpNotFoundError)) {\n          throw ipv6Error;\n        }\n\n        try {\n          return await ipv4Promise;\n        } catch (ipv4Error) {\n          throw new AggregateError([ipv4Error, ipv6Error]);\n        }\n      }\n    })();\n\n    promise.cancel = () => {\n      ipv4Promise.cancel();\n      ipv6Promise.cancel();\n    };\n\n    return promise;\n  };\n}","map":{"version":3,"names":["AggregateError","IpNotFoundError","Error","constructor","options","name","createPublicIp","publicIpv4","publicIpv6","publicIp","ipv4Promise","ipv6Promise","promise","ipv6","cancel","ipv6Error","ipv4Error"],"sources":["/home/nhz/admin (1)/node_modules/public-ip/core.js"],"sourcesContent":["import AggregateError from 'aggregate-error'; // Use built-in when targeting Node.js 16\n\nexport class IpNotFoundError extends Error {\n\tconstructor(options) {\n\t\tsuper('Could not get the public IP address', options);\n\t\tthis.name = 'IpNotFoundError';\n\t}\n}\n\nexport function createPublicIp(publicIpv4, publicIpv6) {\n\treturn function publicIp(options) { // eslint-disable-line func-names\n\t\tconst ipv4Promise = publicIpv4(options);\n\t\tconst ipv6Promise = publicIpv6(options);\n\n\t\tconst promise = (async () => {\n\t\t\ttry {\n\t\t\t\tconst ipv6 = await ipv6Promise;\n\t\t\t\tipv4Promise.cancel();\n\t\t\t\treturn ipv6;\n\t\t\t} catch (ipv6Error) {\n\t\t\t\tif (!(ipv6Error instanceof IpNotFoundError)) {\n\t\t\t\t\tthrow ipv6Error;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\treturn await ipv4Promise;\n\t\t\t\t} catch (ipv4Error) {\n\t\t\t\t\tthrow new AggregateError([ipv4Error, ipv6Error]);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\n\t\tpromise.cancel = () => {\n\t\t\tipv4Promise.cancel();\n\t\t\tipv6Promise.cancel();\n\t\t};\n\n\t\treturn promise;\n\t};\n}\n"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,iBAA3B,C,CAA8C;;AAE9C,OAAO,MAAMC,eAAN,SAA8BC,KAA9B,CAAoC;EAC1CC,WAAW,CAACC,OAAD,EAAU;IACpB,MAAM,qCAAN,EAA6CA,OAA7C;IACA,KAAKC,IAAL,GAAY,iBAAZ;EACA;;AAJyC;AAO3C,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,UAApC,EAAgD;EACtD,OAAO,SAASC,QAAT,CAAkBL,OAAlB,EAA2B;IAAE;IACnC,MAAMM,WAAW,GAAGH,UAAU,CAACH,OAAD,CAA9B;IACA,MAAMO,WAAW,GAAGH,UAAU,CAACJ,OAAD,CAA9B;;IAEA,MAAMQ,OAAO,GAAG,CAAC,YAAY;MAC5B,IAAI;QACH,MAAMC,IAAI,GAAG,MAAMF,WAAnB;QACAD,WAAW,CAACI,MAAZ;QACA,OAAOD,IAAP;MACA,CAJD,CAIE,OAAOE,SAAP,EAAkB;QACnB,IAAI,EAAEA,SAAS,YAAYd,eAAvB,CAAJ,EAA6C;UAC5C,MAAMc,SAAN;QACA;;QAED,IAAI;UACH,OAAO,MAAML,WAAb;QACA,CAFD,CAEE,OAAOM,SAAP,EAAkB;UACnB,MAAM,IAAIhB,cAAJ,CAAmB,CAACgB,SAAD,EAAYD,SAAZ,CAAnB,CAAN;QACA;MACD;IACD,CAhBe,GAAhB;;IAkBAH,OAAO,CAACE,MAAR,GAAiB,MAAM;MACtBJ,WAAW,CAACI,MAAZ;MACAH,WAAW,CAACG,MAAZ;IACA,CAHD;;IAKA,OAAOF,OAAP;EACA,CA5BD;AA6BA"},"metadata":{},"sourceType":"module"}