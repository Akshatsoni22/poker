{"ast":null,"code":"export default function indentString(string) {\n  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    indent = ' ',\n    includeEmptyLines = false\n  } = options;\n\n  if (typeof string !== 'string') {\n    throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``);\n  }\n\n  if (typeof count !== 'number') {\n    throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``);\n  }\n\n  if (count < 0) {\n    throw new RangeError(`Expected \\`count\\` to be at least 0, got \\`${count}\\``);\n  }\n\n  if (typeof indent !== 'string') {\n    throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof indent}\\``);\n  }\n\n  if (count === 0) {\n    return string;\n  }\n\n  const regex = includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n  return string.replace(regex, indent.repeat(count));\n}","map":{"version":3,"names":["indentString","string","count","options","indent","includeEmptyLines","TypeError","RangeError","regex","replace","repeat"],"sources":["/home/nhz/admin (1)/node_modules/aggregate-error/node_modules/indent-string/index.js"],"sourcesContent":["export default function indentString(string, count = 1, options = {}) {\n\tconst {\n\t\tindent = ' ',\n\t\tincludeEmptyLines = false\n\t} = options;\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (count < 0) {\n\t\tthrow new RangeError(\n\t\t\t`Expected \\`count\\` to be at least 0, got \\`${count}\\``\n\t\t);\n\t}\n\n\tif (typeof indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, indent.repeat(count));\n}\n"],"mappings":"AAAA,eAAe,SAASA,YAAT,CAAsBC,MAAtB,EAAuD;EAAA,IAAzBC,KAAyB,uEAAjB,CAAiB;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACrE,MAAM;IACLC,MAAM,GAAG,GADJ;IAELC,iBAAiB,GAAG;EAFf,IAGFF,OAHJ;;EAKA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;IAC/B,MAAM,IAAIK,SAAJ,CACJ,gDAA+C,OAAOL,MAAO,IADzD,CAAN;EAGA;;EAED,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;IAC9B,MAAM,IAAII,SAAJ,CACJ,gDAA+C,OAAOJ,KAAM,IADxD,CAAN;EAGA;;EAED,IAAIA,KAAK,GAAG,CAAZ,EAAe;IACd,MAAM,IAAIK,UAAJ,CACJ,8CAA6CL,KAAM,IAD/C,CAAN;EAGA;;EAED,IAAI,OAAOE,MAAP,KAAkB,QAAtB,EAAgC;IAC/B,MAAM,IAAIE,SAAJ,CACJ,yDAAwD,OAAOF,MAAO,IADlE,CAAN;EAGA;;EAED,IAAIF,KAAK,KAAK,CAAd,EAAiB;IAChB,OAAOD,MAAP;EACA;;EAED,MAAMO,KAAK,GAAGH,iBAAiB,GAAG,KAAH,GAAW,aAA1C;EAEA,OAAOJ,MAAM,CAACQ,OAAP,CAAeD,KAAf,EAAsBJ,MAAM,CAACM,MAAP,CAAcR,KAAd,CAAtB,CAAP;AACA"},"metadata":{},"sourceType":"module"}